{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | product_img_url: 'large' }}">

  {% comment %} Breadcrumb not needed
  {% include 'breadcrumb' %}
  {% endcomment %}

  <div class="grid">
    <div class="product-grid grid-item large--two-thirds push--large--one-sixth medium--five-sixths push--medium--one-twelfth small--five-sixths push--small--one-twelfth">

      <div class="grid-item large--seven-twelfths medium--seven-twelfths">

        {% comment %}
          If we only have one product image, show a large version of it.
          If we have more than 1, show it then loop through the rest as thumbnails.
        {% endcomment %}
        {% if product.images.size == 0 %}

          <div class="product-photo-container">
            <img src="{{ '' | product_img_url: '' }}" alt="">
          </div>

        {% else %}
          <div class="product-photo-container">
            {% comment %}
              column for large thumbnail
            {% endcomment %}
            <div class="grid-item large--one-whole medium-one-whole small--one-whole">
              <a href="{{ product.featured_image.src | product_img_url: 'original' }}">
                <img src="{{ product.featured_image.src | product_img_url: 'original' }}" alt="{{ product.featured_image.alt | escape }}">
              </a>
            </div>
          </div>

          {% comment %}
            If we have more than one product image, loop through them and create thumbnails.

            By default, images will link to the original size of themselves. It is recommended
            to add a lightbox or photo-switching effect with JavaScript.
          {% endcomment %}
          {% if product.images.size > 1 %}

          {% comment %}
            column for smaller thumbnails
          {% endcomment %}

          <div class="grid-item small--five-sixths push--small--one-twelfth">
            <ul class="product-photo-thumbs grid-item remove_padding">

              {% for image in product.images %}

                <li class="product-photo-thumb grid-item large--one-quarter medium--one-quarter small--one-quarter">

                  <a class="gallery" href="{{ image.src | product_img_url: 'original' }}">
                    <img src="{{ image.src | product_img_url: 'medium' }}" alt="{{ image.alt | escape }}">
                  </a>

                </li>
              {% endfor %}

            </ul>
          </div>
          {% endif %}

        {% endif %}

      </div>


      {% comment %}
        column for product descriptions, etc
      {% endcomment %}
      <div class="grid-item large--two-fifths medium--two-fifths">

        <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">

          <meta itemprop="priceCurrency" content="{{ shop.currency }}">

          <header class="page-header">
            <h3 class="text-center" itemprop="name">{{ product.title }}</h3>
          </header>

          {% if product.available %}
            <link itemprop="availability" href="http://schema.org/InStock">
          {% else %}
            <link itemprop="availability" href="http://schema.org/OutOfStock">
          {% endif %}

          {% comment %}
            ID addToCartForm is a selector for the ajaxify cart plugin
          {% endcomment %}
          <div class="text-center">
            <form action="/cart/add" method="post" enctype="multipart/form-data" id="addToCartForm">

              {% comment %}
                Add product variants as a dropdown.
                  - By default, each variant (or combination of variants) will display as its own <option>
                  - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

                You can leverage jQuery to add a callback on page load and each time the select element changes:
                  - Include option_selection.js (as seen at the bottom of this file)
                  - This allows you to use JavaScript anytime the variant dropdown changes
                  - This also separates out your variant options (ie. size, color, etc.) to separate select elements

                For more information on products with multiple options, visit:
                  - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid

              {% endcomment %}
              <h4>Choose Dress Size</h4>

              <select name="id" id="productSelect">
                {% for variant in product.variants %}
                  {% if variant.available %}

                    {% comment %}
                      Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                    {% endcomment %}
                    <option value="{{variant.id}}">
                      {{ variant.title }} - {{ variant.price | money_with_currency }}
                    </option>

                  {% else %}
                    <option disabled="disabled">
                      {{ variant.title }} - Sold out
                    </option>
                  {% endif %}
                {% endfor %}
              </select>

              <h5>Not sure on your size? Click <a id="size_popup" href="#size-chart" style="color: #de2061">here</a> for a more detailed size chart.</h5>

              {% comment %}
                Optionally show the 'compare at' or original price of the product.
              {% endcomment %}
              {% if product.compare_at_price > product.price %}
                <h3>
                  <span id="productPrice" class="on-sale" itemprop="price">
                    {{ product.price | money }}
                  </span>
                </h3>
                <h5>
                  <small id="comparePrice">
                    Compare at:
                    {{ product.compare_at_price_max | money }}
                  </small>
                </h5>
              {% else %}
                <h3>
                  <span id="productPrice" itemprop="price">
                    {{ product.price | money }}
                  </span>
                </h3>
              {% endif %}
              <div class="product-description rte" itemprop="description">
                {{ product.description }}
              </div>
              {% comment %}
                Quantity selector is optional
              {% endcomment %}
              <label for="quantity">Quantity: </label>
              <input min="0" type="number" id="quantity" name="quantity" value="1">

              {% include 'booking-form' %}

                <input type="submit" name="add" class="btn" id="addToCart" value="Add to Garment Bag"/>
              {% comment %}
                To change the "value" here, scroll down to if (variant.available) and change the .val 
              {% endcomment %}

            </form>

            {% comment %} need a wishlist app/feature
            <div class="wish_list grid-item text-center ">
              <p>
                <a href="">
                  {{ 'garment_bag_icon.png' | asset_url | img_tag }}
                  Add to Wish List
                </a>
              </p>
            </div>
            {% endcomment %}

            {% include 'addthis' %}
            
          </div>

        </div>

        {% comment %}
          If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
          in the URL, we can show next/previous links to other products in the collection.
        {% endcomment %}
        {% if collection %}
          {% if collection.previous_product or collection.next_product %}
            <p>

            {% if collection.previous_product %}
              {% capture prev_url %}{{ collection.previous_product}}#content{% endcapture %}
              <span class="left">
                {{ '&larr; Previous Product' | link_to: prev_url }}
              </span>
            {% endif %}

            {% if collection.next_product %}
              {% capture next_url %}{{ collection.next_product}}#content{% endcapture %}
              <span class="right">
                {{ 'Next Product &rarr;' | link_to: next_url }}
              </span>
            {% endif %}

            </p>
          {% endif %}
        {% endif %}

      </div>
    </div>
  </div>

</div>


{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS below as you need. This is only needed on pages where
  product variants are accessible, so doesn't need to live in theme.liquid.

  Currently, the code below does:
    - Overwrites your <select> tag from above
    - Breaks out the product variants into separate fields, if more than one exists
{% endcomment %}

{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>

var selectCallback = function(variant, selector) {

  var addToCart = $('#addToCart'),
      productPrice = $('#productPrice'),
      comparePrice = $('#comparePrice');

  if (variant) {
    if (variant.available) {
      // We have a valid product variant, so enable the submit button
      addToCart.removeClass('disabled').removeAttr('disabled').val('Add To Garment Bag');

    } else {
      // Variant is sold out, disable the submit button
      addToCart.val('Sold Out').addClass('disabled').attr('disabled', 'disabled');
    }

    // Regardless of stock, update the product price
    productPrice.html(Shopify.formatMoney(variant.price, "{{ shop.money_format }}"));

    // Also update and show the product's compare price if necessary
    if ( variant.compare_at_price > variant.price ) {
      comparePrice
        .html('Compare at: ' + Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}"))
        .show();
    } else {
      comparePrice.hide();
    }

  } else {
    // The variant doesn't exist. Just a safegaurd for errors, but disable the submit button anyway
    addToCart.val('Unavailable').addClass('disabled').attr('disabled', 'disabled');
  }
};

jQuery(function($) {

  new Shopify.OptionSelectors('productSelect', {
    product: {{ product | json }},
    onVariantSelected: selectCallback
  });

  // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
  {% if product.options.size == 1 and product.options.first != 'Title' %}
    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>');
  {% endif %}
  
  // Hide selectors if we only have 1 variant and its title contains 'Default'.
  {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
    $('.selector-wrapper').not('.booking-form .selector-wrapper').hide();
  {% endif %}

  // Auto-select first available variant on page load. Otherwise the product looks sold out.
  {% assign found_one_in_stock = false %}
  {% for variant in product.variants %}
    {% if variant.available and found_one_in_stock == false %}
      {% assign found_one_in_stock = true %}
      {% for option in product.options %}
      $('.single-option-selector:eq({{ forloop.index0 }})').val({{ variant.options[forloop.index0] | json }}).trigger('change');
      {% endfor %}
    {% endif %}
  {% endfor %}

});

// jQuery product image switcher

$(document).ready(function() {
  $('.product-photo-thumbs').on('click', 'a', function(event) {
    event.preventDefault();
    var newImage = $(this).attr('href');
    $('.product-photo-container').find('img').attr({ src: newImage });
    return false;
  });
});

  $(function() {
    $('.main-content').avgrund({
      width: 640, // max is 640px
      height: 400, // max is 350px
      showClose: true, // switch to 'true' for enabling close button
      showCloseText: 'Close', // type your text for close button
      closeByEscape: true, // enables closing popup by 'Esc'..
      closeByDocument: true, // ..and by clicking document itself
      holderClass: 'holder', //lets you name custom class for popin holder
      enableStackAnimation: false, // another animation type
      onBlurContainer: 'body', // enaables blur filter for specified block
      openOnEvent: true, // set to 'false' to init on load
      template: $('.content_for_size_chart'), // or function (elem) { }, or $('.content')
    });
  });

</script>

<aside class="content_for_size_chart">
  <h1 class="text-center">Size Chart</h1>
  <table class="size_chart">
  <tbody>
    <tr>
      <td style="text-align: center;"> </td>
      <td style="text-align: center;"><strong>XS</strong></td>
      <td colspan="2" style="text-align: center;"><strong>S</strong></td>
      <td colspan="2" style="text-align: center;"><strong>M</strong></td>
      <td style="text-align: center;"><strong>L</strong></td>
      <td style="text-align: center;"><strong>XL</strong></td>
    </tr>
    <tr style="text-align: center;">
      <td><strong>Size</strong></td>
      <td>P</td>
      <td>4</td>
      <td>6</td>
      <td>8</td>
      <td>10</td>
      <td>12</td>
      <td>14</td>
    </tr>
    <tr style="text-align: center;">
      <td><strong>Bust</strong></td>
      <td>32"</td>
      <td>33"</td>
      <td>34"</td>
      <td>34"</td>
      <td>36"</td>
      <td>37 1/2"</td>
      <td>39"</td>
    </tr>
    <tr style="text-align: center;">
      <td><strong>Waist</strong></td>
      <td>23 1/2"</td>
      <td>24 1/2"</td>
      <td>25 1/2"</td>
      <td>26 1/2"</td>
      <td>27 1/2"</td>
      <td>29 1/2"</td>
      <td>30 1/2"</td>
    </tr>
    <tr style="text-align: center;">
      <td><strong>Hips</strong></td>
      <td>34"</td>
      <td>35"</td>
      <td>36"</td>
      <td>37"</td>
      <td>38"</td>
      <td>39 1/2"</td>
      <td>41"</td>
    </tr>
  </tbody>
  </table>
</aside>